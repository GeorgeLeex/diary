创建时间：	2017/11/21 星期二 上午 9:01

一.文件读写(IO流)
1.文件操作的分类:
按照读取的内容分类
    a)字节流
    b)字符流
    c)对象流
按照流的方向
    a)输入流:负责把文件中的内容读取到内存中
    b)输出流:负责把内存中的数据写入到文件中
按照流的功能
    a)节点流:以流的原始状态进行操作
    b)包装流:在流的基础进行包装,提供更多的方法进行操作

2.持久化: 把瞬时数据和持久数据相互转化的机制
    瞬时数据:存在于内存中的数据,程序终止,数据消失
    持久数据:存放于硬盘中的数据

3.File---文件类,即表示文件又可以表示目录
创建文件对象:File file = new File(String path);
获取目录下所有的文件对象(包括文件和目录) File[] files = file.listFiles();
获取目录下所有文件的名称: String[] names = file.list();

4.读文件的步骤：
a)确定要读取文件的位置
        String path="d:\\test\\test.txt";
b)构建数据流的对象,需要处理FileNotFoundException 类型的异常
    InputStream in=new FileInputStream(path);
c)声明变量
    String str="";//用于存储每一读取的数据
    byte[] b=new byte[1024];//从文件中每次读取 1024个字节
d)开始读取数据：read()  返回读取的字节个数 ,需要处理IOException
    int len=in.read(b);
    //因为文件多大我们不清楚
    while(len!=-1){
        str+=new String(b,0,len);//从字节数组 b 的下标为 0的位置开始转换，转换 len 个数据
        len=in.read(b);//再从文件中读取一次
    }
e)关闭资源 ,需要处理IOException
    in.close();

5.写文件的步骤：
a)确定操作的文件，如果文件不存在，自动创建，仅仅创建文件，目录不管    
    String path="d:\\test.txt";
b)构建输出流对象,需要处理FileNotFoundException异常
    OutputStream out=new FileOutputStream(path);
c)确定要写入文件中内容
    String msg="";
d)因为使用的是 字节流    ，必须把字符串转换为字节数组
    byte[] b=msg.getBytes();
e)使用write方法把字节数组中的数据写入文件, ,需要处理IOException
    out.write(b);
f)关闭资源 ,需要处理IOException
    out.close();

6.缓冲流:在节点流的基础上,添加一个缓冲区,减少对文件和内存的频繁操作
字符流的操作
a)字符流写入
        String path="d:\\text.txt";
        Writer out=new FileWriter(path);
        BufferedWriter bw=new BufferedWriter(out);
        bw.write("");
        bw.newLine();//相当于 \r  \n  
        bw.close();
        out.close();
b)字符流读取:
        String path="d:\\text.txt";
        Reader in=new FileReader(path);
        BufferedReader br=new BufferedReader(in);
        String str = ""; //保存每次读取到的那一行数据;
        String temp=br.readLine();//读取一整行,直到遇到\n或\r时才认为某一行已终止
        while(str!=null){
            str += temp;            
            temp=br.readLine();
        }
        br.close();
        in.close();

7.对象流---把java中的对象整体写入到文件中,或者把整体从文件中读取出来
a)前提是该对象所属的类可以进行序列化,实现了Serializable接口或Externalizable接口的对象便可以进行序列化
b)序列化:能够把对象拆分后加入到数据流中,进行传递的能力
c)反序列化:把数据流中的数据再重新组装成对象的能力
如果一个类可以序列化.那么它的所有子类都可以序列化
d)transient关键字
    transient修饰的属性不进行序列化的操作,不会写入到数据流中
    transient修饰的属性反序列化后其值被设定为初始值

8.接口的分类
    ①标识接口Serializable:一个标记,没有任何行为,一个空的接口
    ②单功能接口:接口中的方法单一
       多功能接口:接口中的方法多样
    ③常量接口:接口中只有常量的声明,接口是常量的最佳存放位置