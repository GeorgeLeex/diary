创建时间：	2018/1/1 星期一 下午 2:37

一.函数
1.返回值:
a)一般函数的调用: 如果函数没有return语句,那么会在函数体内所有代码执行完后返回一个undefined
b)作为构造函数被调用: 如果没有return语句或者返回的是基本类型,那么会将this返回
2.函数声明和函数表达式
a)函数声明:以function开头,不允许匿名且不能被立即调用的标准函数,没有对整个函数进行其它操作
b)函数表达式:
①将一个匿名函数赋值给一个变量
②将一个匿名函数使用括号括起来并在后面加一对小括号,会立即执行
③将一个函数作为返回值返回
④将一个非匿名函数赋值给一个变量
3.变量和函数的声明前置
当声明一个普通函数或变量时,它们的声明会被放在赋值语句之前,这也就导致了如果把一个函数声明赋值给一个变量,然后在该赋值语句之前使用该 变量时会报错,因为此时该变量的声明被前置了,尚未赋值,为undefined. 不过函数声明的前置比变量声明的前置要早   
4.this
a)全局下的this代表着window
b)一般函数下的this也代表着window, 不过严格模式下该this会指向undefined
c)对象的方法里的this:通常指向该对象,对象.方法的方式调用方法其this指向调用它的对象
d)对象原型链上的this: 原型链上函数里的this也能指向其下的对象
e)构造器中的this: 当一个函数配合new使用作为构造函数使用时,其函数里的this会指向一个空的对象,且该对象的原型指向构造函数的prototype,如果构造函数里的代码执行完后没有return或者return了一个基本类型,那么会将this返回,否则以return返回的对象为准
5.call/apply方法
a)适用于调用那些无法直接调用的方法
b)使用: 函数名.call/apply(),参数1可以为任意值,会传入该函数,当参数1为基本类型时,会自动将其转换为对应的引用类型传入,当为null或undefined时,代表着window,严格模式下依然为原值, 其后的参数为该函数的实参,该函数里的this会指向传入的参数1, call和apply的区别只是放实参的方法不同,call使用可变参数放实参, 而apply使用一个数组放实参
6.bind方法
a)函数.bind(对象, 参数...):把方法绑定在对象上并返回对象绑定后的方法,其函数里的this指向传入的对象. 即使绑定后返回的函数被作为其它对象的函数调用,其this依然指向最初绑定时传入的对象;
b)bind里的currying科里化:
假设一个函数有多个参数, 需要多次调用该函数,但有部分参数都是相同固定的值, 为了减少重复代码可以使用bind(),然后参数1为null或undefined,其后的参数为固定重复的参数值,之后每次调用返回的函数对象传入的参数都会传递给固定参数后的参数
c)如果有一个对象的一个属性为函数对象,当使用对象.属性()调用时其函数里的this指向该对象,但当将该函数赋给一个变量时,调用该变量时函数里的this指向的是window,若要使其指向原本的对象时,可以使用bind()绑定
d)当bind返回的函数对象与new一起作为构造函数使用时,会忽视掉bind函数绑定的对象, 其this指向的是原型为构造函数的prototype的空对象
7.函数的属性
a)函数.name : 函数名; 函数.length:形参的个数; arguments.length: 实参个数
b)arguments: 类似于数组的对象,其原型并不是Array.prototype,所以没有数组才有的方法;arguments对象与传入的参数具有绑定关系,修改形参对应索引上的值会影响形参的值,但是当未传参数时会失去绑定关系,改变arguments对应索引上的值无法影响到形参的值
8.eval()函数: 转换函数,传入一个字符串
a)如果传入的字符串包含运算符,那么eval函数会将其计算并返回其结果值
b)可以把符合json格式的数据转换成json对象, json格式的写法: {name:value, name:value...}, 类似于json格式的创建对象,传入至eval函数时需使用小括号包裹并使用引号或双引号使其成为一个字符串.