创建时间：	2017/12/10 星期日 下午 5:03

一.SET运算符
也就是集合操作
1.union / union all
得到两张表结果的并集,union去重, union all 不去重
2.intersect
返回两个结果集的交集
3.minus
返回两个结果集的差集,即去除第一个结果集中两个结果集共有的部分
注意事项:
1.多张表中的select列表中的列名和表达式要在数量和类型上相对应
2.order by子句只能出现在整个语句的最后面,order by子句可以使用第一个查询中的列名,别名或相对位置.但不能使用表别名.列名的格式来排序
3.除了union all以外,其他的SET操作符都会去重并按照第一个查询的第一列进行升序排列
4.如果多表的select语句的列或表达式的数量和类型不相对应,可以在缺少对应的表相应的位置上加上对应类型的转换函数并转为null使之相对应,或者直接填上null或填入对应类型的数据也可以
5.使用相对位置进行排序:
可以在每个结果集的select语句添加一列数字列,并在order by子句使用该列的序号值进行排序,如果不想显示该列,则可以使用 column 列名 noprint命令来使其不显示

二.删除重复数据
delete from 表名 where rowid not in (select min(rowid) from 表名 group by 列名)
每一行的数据的rowid都是不重复的,先根据重复的列名进行分组并使用max或min函数找到唯一要保留的那一行,再用not in去除rowid不等于保留的rowid的记录达到去重的效果
三.子查询
单行或多行子查询决定了另一边运算符,而单列或多列决定了需要几列来与子查询的结果进行匹配
1.单列子查询---在一行中只返回一列的子查询
oracle9i中单列子查询可用于decode和case-end以及select中除了group by以外的所有子句中
2.相关子查询
相关子查询按照一行接一行的顺序执行,主查询的每一行都执行一次子查询,子查询中使用主查询中的列
3.exists操作符
检查在子查询中是否存在满足条件的行,如果存在满足条件的行,则不在子查询中继续查找并返回true,如果不存在满足条件的行,则返回false并继续在子查询中查找.
比如可应用于查找出哪些人是公司的管理者

只要满足子查询的条件便表明是管理者,满足条件便返回true,为true就显示其信息,子查询中主要关注的是是否满足条件,并不关注要显示什么内容
4.not exists
5.with子句
a)with子句的使用
with with子句名 as (select语句)
b)作用
①避免书写重复相同的语句块
②with子句将该子句中的语句执行一次并存储到用户的临时表空间中
③提高效率

四.PL/SQL块
1.由三个块组成,声明部分,执行部分,异常处理部分
DECLARE
    声明部分
BEGIN
    执行部分
EXCEPTION
    执行异常部分
END;
其中执行部分是必须的
2.将查询结果赋给变量:
 select 列 into 变量名 from 表名 where..
3.打印: dbms_output.put_line(打印的内容);
4.动态获取数据类型
在声明变量时 在变量名的后面 使用 表名.列名%type 即可获取到该表的某列的类型
5.声明一个记录类型
type 类型名 is record (变量名1 类型, 变量名2 类型,......)
然后可以创建该类型的变量,可以给该类型的变量赋值取值
6.流程控制
a)条件语句
①if语句
    if 布尔表达式 then
        PL/SQL和SQL语句
    end if;
②if-else语句
    if 布尔表达式 then
        PL/SQL和SQL语句
    else
        其它语句
    end if;
③if-else-if语句
    if 布尔表达式 then
        PL/SQL和SQL语句;
    elsif 布尔表达式 then
        其它语句;
    else
        其它语句;
    end if;
    注意elsif
b)循环语句
①循环
loop
    语句; //循环体
exit when 布尔表达式; //循环条件
    i := i + 1; //迭代条件
end loop;
②while循环
while 循环条件 loop
    循环体;
    迭代条件
end loop;
③for循环
for 循环变量 in 起始值...终止值 loop
    循环体;
end loop;

