创建时间：	2018/1/14 星期日 下午 9:32

一.正则基础
js中可以显示的使用RegExp对象来使用正则表达式,也可以使用字面量 /匹配模板/ 来代替RegExp对象调用不同的方法
1.元字符
a) . 表示任意字符,除了换行符以外: \n, \r, \u2028或\u2029;
b) \d 表示数字 0-9
c) \D 表示\d取反, 即不是数字0-9的字符
d) \w 表示 数字0-9 或 字母a-z以及A-Z 或 下划线
e) \W 表示\w取反
f) \s 表示空格符, Tab, 换页符, 换行符
g) \S 非\s
h) \t \r \n \v \f 分别表示Tab, 回车, 换行, 垂直制表符, 换页符
2.范围符号
a) [...] 表示字符的范围,下限与上限用 - 隔开,多个字符范围可以写在一个方括号里且不用隔开
b) [^...] 表示指定字符范围以外
c) ^ 表示行首, 格式: ^被匹配字符 确定被匹配字符是否在行首
d) $ 表示行尾, 格式: 字符$
e) \b 表示单词边界, 即单词和符号之间的边界, 单词可以是中文字符,英文字符,数字, 符号可以是中文符号, 英文符号, 空格, 制表符, 空格, \b会识别指定字符串是否处于边界
f) \B 非单词边界, 单词与单词, 符号与符号之间的边界
3.特殊符转义,如果被匹配的字符包含特殊字符,正则表达式想要直接匹配时,可以在模板中的特殊字符前加上 \
4.量词
a) * 表示重复零次或多次, 即 >=0
b) + 表示重复一次或多次. 即 >0
c) ? 表示重复零次或一次
d) {n} 重复n次
e) {n,m} 重复n到m次
g) {n,} 重复n次或更多次
h) x|y 既匹配x也匹配y,可以多个连续使用
5.懒惰限定符
当字符 ? 紧跟在量词后面时,匹配模式是非贪婪的,会尽可能少的匹配字符串
6.分组
a)就是把一部分匹配模板所捕获的内容记录保存下来方便后面引用, 使之可以复用,简化表达式,所捕获的内容为匹配的字符串中最后一个字符，被捕获的分组记录下来后会自动从1开始分配编号, 然后捕获组后面可以使用 \编号 的方式对其引用
b)格式
① (exp) 匹配表达式并自动分组,会自动生成编号
② (?<name>exp) 匹配表达式并把该捕获文本放入名称为name的分组里, 其后对该分组的引用通过 \k<name>引用
③ (?:exp) 匹配exp,但不捕获文本, 也不给该分组分配编号
零宽断言---不会返回符合断言中表达式的字符的断言
① (?=pattern) 正向断言,匹配指定位置后面跟的是符合pattern表达式的字符
②(?!pattern) 正向否定断言,匹配指定位置后面跟的不是符合pattern表达式的字符
③(?<=pattern) 反向断言, 前面跟的是pattern的字符
④(?<!pattern) 反向否定断言,前面跟的不是pattern的字符
ps:以上四种都是非获取匹配,不会被捕获并分组
7.三个flag
a)global: js中当指定了global检索模式时,不会遇到第一个匹配的就停止,而是会去匹配所有的
b)ignoreCase: 检索时忽略大小写
c)multiline: 指定了multiline时,即使有换行也继续检索
使用方式:
①在字面量 /字面量/ 后加上 三个flag的字母的首字母的小写表示指定哪几种检索模式
②RegExp构造函数的第二个参数设置为三个flag的字母的首字母小写
8.RegExp对象的属性
a)global, ignoreCase, multiline, 返回一个布尔值, 判断检索模式是否包含该属性
b)source, 返回匹配模板的字符串
9.RegExp对象的方法
a) test(): 检索字符串中是否存在符合检索条件的字符,返回布尔值
b) exec(): 返回字符串中符合检索条件的字符,如果没有匹配的则返回null
c) compile(): 用于改变RegExp对象, 既可以修改匹配模板, 也可以修改检索模式
10.String类型prototype属性上与正则相关的方法
a)search(reg): 寻找符合reg表达式的字符第一次出现的索引
b)replace(reg, "字符"): 将符合的替换为指定字符串
c)match(reg): 返回一个包含符合检索条件字符串的数组
d)split(reg): 根据符合检索条件的字符串来进行分割,返回一个数组