创建时间：	2017/11/25 星期六 下午 3:56

一.异常---在编码过程中或程序执行中出现的意料以外的事情
异常类的体系结构

                非检查型异常                            检查性异常
二.异常处理
1.自行处理
使用try块监视可能会发生异常的代码,使用catch对其发生的异常进行捕获,并处理(显示异常信息)
异常处理的三种情况:
    a)try中的代码没有发生异常,执行完try块总的内容后,跳过catch块执行后续内容
    b)try中的代码发生异常,从发生异常的代码处跳出try,catch块有能力捕获异常,则进入catch块执行其中的内容再执行程序后续内容
    c)catch没有能力捕获异常,程序自动终止
finally：不管是否发生异常也不管能否处理 finally中的内容必须执行,而且在try块的 return语句前执行，仅仅当try或catch中有System.exit(0)时才不执行,不过如果finally也return一个值的话,则try块中的return语句不再执行.
2.回避异常---throws
a)把异常信息向外声明,将来谁调用该方法就由谁来负责处理,通常不建议在底层处理异常,而是尽量把异常向外声明
b)在方法重写中,如果父类方法有异常声明,那么子类要么不声明异常要么声明一个小于等于父类方法抛出异常的异常
3.重新抛出一个新的异常---throw
throw new 异常类型("异常信息");
a)代码本身没有异常,但是某些参数的值不符合要求时,可以手动引发一个异常
b)代码发生异常,正确处理后按要求提示用户
三.
1.如果使用多重catch,则要么只执行一个,要么一个都不执行,且捕获异常的类型必须由小到大,最大的Exception应该放最后
2.throws:在方法上声明异常,通知方法的调用者,使用该方法时需要注意的问题
3.throw:在代码块中向外抛出异常(引发异常).建议throw引发的异常尽量使用运行时异常(RuntimeException)
4.throws声明的异常和throw引发的异常需要再方法的调用处处理,否则继续向上抛
5.自定义异常:
当jdk提供的异常类型无法满足需求时,根据需求编写自定义异常类,要求必须是Exception或其子类的子类,通常使用继承自RuntimeException的异常
6.通常,要把某些功能封装为jar文件时,其中的所有异常都必须向外抛
