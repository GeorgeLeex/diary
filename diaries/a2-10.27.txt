创建时间：	2017/10/27 星期五 上午 9:06

一.原码,补码,反码

  1.计算机以补码的形式保存所有的整数，移位就是对一个整数的补码进行操作
  java中整数常量默认为int,它所占的空间为4个字节即32位,所以当用二进制定义整数时,第32位作为符号位.当是long型时,则第64位作为符号位
  一个数的二进制最前面的位表示为符号位.0代表正数,1代表负数
  一个正数的原码,补码,反码都相同.
  一个负数的原码为该数的绝对值的原码,不过符号位为1.它的反码也是原码的除符号位取反,补码为反码+1
  一个负数的补码等于其绝对值的原码全部取反并+1

二.运算符
    1.算数运算符需注意的问题:一个数取模的结果的正负取决于被模数
    2.赋值运算符:赋值---只允许常量,变量,表达式给变量赋值,java中支持连续赋值,int a =3 = 4;并不是连续赋值.
    3.比较运算符:instanceof---检查是否是某类的对象,例如:"abc" instanceof String---true.
    4.逻辑运算符:逻辑&& 逻辑|| 都会短路,逻辑&&当左面的表达式为false时整个表达式就成了false并且会短路不会再去判断右边的值,逻辑||当左边为true时就短路.
      按位与和按位或在逻辑运算上与逻辑&&和逻辑||相同,但它不会短路,左边表达式的值并不会影响到右边的值的是否运算
    5.位运算:只适用于整数和char类型,位运算即直接对二进制进行运算:
        按位与&:只有两边都为1,运算结果才为1,否则为0
        按位或|:只有两边都为0,运算结果才为0.否则为1
        异或^:只有两边不同时才为1.否则为0,异或是为了求异
        取反~:正负数取反都是依据该数的二进制码(原码)的补码进行各位取反
        左移<<:  a<<b表示将a的二进制数向左移b位,右边的空位用0补
        右移>>:  a>>b表示将a的二进制数向右移b位,左边的空位根据该二进制数的最高位(符号位)来补,如果最高位是0,即是正数,则补0,如果最高位是1,即为负数,则补1
        无符号右移>>>:  无符号位移即不看符号的位移,不管最高位:左边移空的部分用0补
        所谓的左移右移其实相当于乘以或除以了2的n次方:2<<3:  2乘以2的3次方; 2>>3:  2除以2的3次方
    逻辑与或 和 按位与或的区别:按位与或既可以参加逻辑运算又可以参加位运算,且不会短路,逻辑与或只能参加逻辑运算且会短路
    6:三元运算符:表达式1?表达式2:表达式3
如果表达式2和表达式3的值可以自动转换的话则会自动转换
三元运算符要求必须返回一个结果,即必须要有个变量来接收
三.运算符的优先级
    1:一元运算符>二元运算符>三元运算符
    2:算数运算符>关系运算符>逻辑运算符>赋值运算符
    3:括号的优先级别最高
    4:只有单元运算符,三元运算符,赋值运算符是从右往左运算的
    
ps:前置++或--的优先级很高,但是后置++ -- 的优先级最低
四.
包名一个点表示为一级,会在工作空间下逐级创建文件夹
任何double类型除以0其值为无穷大Infinity
double类型的数据取余只对整数部分取余,取完余之后拼上小数位
1%2商0余1
运算符的贪婪法则:当一个运算符遇到一个和自己相同的符号,自动结成一对作为一个符号使用
运算2的3次方的最快方式:2<<2.
i=i++的问题:i++是一个表达式，是有返回值的，它的返回值就是i自加前的值,++的优先级大于=
后++符先将自己的值储存起来,然后再对变量进行++的操作,最后再进行赋值操作